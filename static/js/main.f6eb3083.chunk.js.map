{"version":3,"sources":["redux/constants.js","redux/cityForecastReducer.js","redux/store.js","components/SearchForm.js","components/BarChartXY.js","components/CitiesTemperatureFinder.js","App.js","index.js"],"names":["SET_CITY_FORECAST_DATA","SET_CITY_FORECAST_IS_LOADING","SET_CITY_FORECAST_IS_ERROR","initialState","data","isError","isLoading","cityForecastReducer","state","action","type","value","getCityForecastInfo","cityForecastInfo","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","SearchForm","onSubmit","setIsError","useState","searchValue","setSearchValue","lastQuery","setLastQuery","handleSubmit","e","preventDefault","toLowerCase","trim","className","placeholder","onChange","target","trimStart","disabled","onClick","BarChartXY","info","yName","title","map","item","xName","xData","yData","BarChart","width","height","XAxis","dataKey","stroke","YAxis","Tooltip","CartesianGrid","strokeDasharray","Bar","fill","barSize","getTempAndTimeXYData","list","result","forEach","push","dt_txt","split","slice","main","temp","mapDispatchToProps","setCityForecastData","setCityForecastIsLoading","setCityForecastIsError","connect","axios","method","url","then","response","catch","finally","Object","keys","length","city","name","App","ReactDOM","render","document","getElementById"],"mappings":"0MAAaA,EAAyB,yBACzBC,EAA+B,+BAC/BC,EAA6B,6BCepCC,EAAe,CACjBC,KAAM,GACNC,SAAS,EACTC,WAAW,GA0BAC,EAvBa,WAAmC,IAAlCC,EAAiC,uDAAzBL,EAAcM,EAAW,uCAC1D,OAAQA,EAAOC,MACX,KAAKV,EACD,OAAO,2BACAQ,GADP,IAEIJ,KAAMK,EAAOL,OAErB,KAAKH,EACD,OAAO,2BACAO,GADP,IAEIF,UAAWG,EAAOE,QAG1B,KAAKT,EACD,OAAO,2BACAM,GADP,IAEIH,QAASI,EAAOE,QAExB,QACI,OAAO,eAAIH,KCrCVI,EAAsB,SAAAJ,GAAK,OAAIA,EAAMK,kBAE5CC,EAAcC,YAAgB,CAChCF,iBAAkBN,IAKPS,EAFDC,YAAYH,EAAaI,YAAgBC,M,oDC8BxCC,EAtCI,SAAC,GAAkE,IAAhEC,EAA+D,EAA/DA,SAA+D,IAArDhB,eAAqD,aAApCC,iBAAoC,SAAjBgB,EAAiB,EAAjBA,WAAiB,EAC3CC,mBAAS,IADkC,mBAC1EC,EAD0E,KAC7DC,EAD6D,OAE/CF,mBAAS,IAFsC,mBAE1EG,EAF0E,KAE/DC,EAF+D,KAU3EC,EAAe,SAACC,GAClBA,EAAEC,iBACFT,EAASG,EAAYO,cAAcC,QACnCL,EAAaH,GACbC,EAAe,KAEnB,OACI,uBAAMQ,UAAU,cAAcZ,SAAUO,EAAxC,UACI,uBACIK,UAAU,qBACVvB,KAAK,OACLwB,YAAY,SACZvB,MAAOa,EACPW,SAnBc,SAAC,GAA2B,IAAfxB,EAAc,EAAxByB,OAAUzB,MACnCW,GAAW,GACXG,EAAed,EAAM0B,gBAmBjB,wBACIJ,UAAU,sBACVK,SAAUhC,GAA6B,KAAhBkB,EACvBd,KAAK,SACL6B,QAASX,EAJb,SAMKtB,EAAY,aAAe,WAE/BD,GAAW,mBAAG4B,UAAU,0BAAb,uCAA+DP,EAA/D,yB,6DChBTc,EAfI,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAAyB,IAAjBC,aAAiB,MAAT,GAAS,EAC3CvC,EAAOqC,EAAKG,KAAI,SAAAC,GAAI,oBAAOC,MAAOD,EAAKE,OAAQL,EAAQG,EAAKG,UAClE,OACA,gCACI,6BAAKL,IACL,eAACM,EAAA,EAAD,CAAUC,MAAO,KAAMC,OAAQ,IAAK/C,KAAMA,EAA1C,UACI,cAACgD,EAAA,EAAD,CAAOC,QAAQ,QAAQC,OAAO,YAC9B,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAeH,OAAO,OAAOI,gBAAgB,QAC7C,cAACC,EAAA,EAAD,CAAKN,QAASX,EAAOkB,KAAK,UAAUC,QAAS,YCLnDC,EAAuB,SAACC,GAC1B,IAAMC,EAAS,GAQf,OAPAD,EAAKE,SAAQ,SAACpB,GACVmB,EAAOE,KAAK,CACRnB,MAAOF,EAAKsB,OAAOC,MAAM,KAAK,GAAGC,MAAM,EAAG,GAC1CrB,MAAOH,EAAKyB,KAAKC,UAIlBP,GAmDLQ,EAAqB,CACvBC,oBJrE+B,SAAArE,GAAI,MAAK,CACxCM,KAAMV,EACNI,SIoEAsE,yBJjEoC,SAAA/D,GAAK,MAAK,CAC9CD,KAAMT,EACNU,UIgEAgE,uBJ7DkC,SAAAhE,GAAK,MAAK,CAC5CD,KAAMR,EACNS,WI8DWiE,eAVS,SAAApE,GAAK,MAAK,CAC9BK,iBAAkBD,EAAoBJ,MASFgE,EAAzBI,EAtDiB,SAAC,GAK1B,IAJH/D,EAIE,EAJFA,iBACA4D,EAGE,EAHFA,oBACAE,EAEE,EAFFA,uBACAD,EACE,EADFA,yBAoBA,OACI,qCACI,cAAC,EAAD,CACIrD,SApB0B,SAACV,GACnCgE,GAAuB,GACvBD,GAAyB,GAEzBG,IAAM,CACFC,OAAQ,MACRC,IAAI,sDAAD,OAAwDpE,EAAxD,kBL/BK,sCKgCTqE,MAAK,SAACC,GACLR,EAAoB,eAAKQ,EAAS7E,UACnC8E,OAAM,WACLT,EAAoB,IACpBE,GAAuB,MACxBQ,SAAQ,WACPT,GAAyB,OAQrBrE,QAASQ,EAAiBR,QAC1BC,UAAWO,EAAiBP,UAC5BgB,WAAYqD,IAGfS,OAAOC,KAAKxE,EAAiBT,MAAMkF,OAAS,GACzC,cAAC,EAAD,CACI7C,KAAMqB,EAAqB,YAAIjD,EAAiBT,KAAK2D,OACrDrB,MAAM,cACNC,MAAK,0BAAqB9B,EAAiBT,KAAKmF,KAAKC,cChD1DC,EAPH,kBACN,qBAAKxD,UAAU,MAAf,SACI,cAAC,EAAD,OCAVyD,IAASC,OACL,cAAC,IAAD,CAAU3E,MAAOA,EAAjB,SACI,cAAC,EAAD,MAEJ4E,SAASC,eAAe,W","file":"static/js/main.f6eb3083.chunk.js","sourcesContent":["export const SET_CITY_FORECAST_DATA = 'SET_CITY_FORECAST_DATA';\nexport const SET_CITY_FORECAST_IS_LOADING = 'SET_CITY_FORECAST_IS_LOADING';\nexport const SET_CITY_FORECAST_IS_ERROR = 'SET_CITY_FORECAST_IS_ERROR';\n\nexport const API_KEY = `73a790aa2cc4440e897ba2ba13842a4f`;","import {SET_CITY_FORECAST_IS_ERROR, SET_CITY_FORECAST_IS_LOADING, SET_CITY_FORECAST_DATA} from \"./constants\";\n\nexport const setCityForecastData = data => ({\n    type: SET_CITY_FORECAST_DATA,\n    data\n});\n\nexport const setCityForecastIsLoading = value => ({\n    type: SET_CITY_FORECAST_IS_LOADING,\n    value\n});\n\nexport const setCityForecastIsError = value => ({\n    type: SET_CITY_FORECAST_IS_ERROR,\n    value\n});\n\nconst initialState = {\n    data: {},\n    isError: false,\n    isLoading: false\n}\n\nconst cityForecastReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_CITY_FORECAST_DATA:\n            return {\n                ...state,\n                data: action.data,\n            };\n        case SET_CITY_FORECAST_IS_LOADING:\n            return {\n                ...state,\n                isLoading: action.value,\n            };\n\n        case SET_CITY_FORECAST_IS_ERROR:\n            return {\n                ...state,\n                isError: action.value,\n            };\n        default:\n            return {...state};\n    }\n};\n\nexport default cityForecastReducer;","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport cityForecastReducer from './cityForecastReducer';\n\nexport const getCityForecastInfo = state => state.cityForecastInfo;\n\nconst rootReducer = combineReducers({\n    cityForecastInfo: cityForecastReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst SearchForm = ({ onSubmit, isError = false, isLoading = false, setIsError }) => {\n    const [searchValue, setSearchValue] = useState('');\n    const [lastQuery, setLastQuery] = useState('');\n\n    const handleInputChange = ({ target: { value } }) => {\n        setIsError(false);\n        setSearchValue(value.trimStart());\n    }\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit(searchValue.toLowerCase().trim());\n        setLastQuery(searchValue);\n        setSearchValue('');\n    }\n    return (\n        <form className=\"search-form\" onSubmit={handleSubmit}>\n            <input\n                className=\"search-form__input\"\n                type=\"text\"\n                placeholder=\"Search\"\n                value={searchValue}\n                onChange={handleInputChange}\n            />\n            <button\n                className=\"search-form__button\"\n                disabled={isLoading || searchValue === ''}\n                type=\"submit\"\n                onClick={handleSubmit}\n            >\n                {isLoading ? 'Loading...' : 'Search'}\n            </button>\n            {isError && <p className=\"search-form__error-text\">{`Oops. Forecast for '${lastQuery}' was not found`}</p>}\n        </form>\n    );\n};\n\nexport default SearchForm;\n\nSearchForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n    isError: PropTypes.bool.isRequired,\n    isLoading: PropTypes.bool.isRequired,\n    setIsError: PropTypes.func.isRequired,\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid} from \"recharts\";\n\n\nconst BarChartXY = ({ info, yName , title = '' }) => {\n    const data = info.map(item => ({ xName: item.xData, [yName]: item.yData,}));\n    return (\n    <div>\n        <h1>{title}</h1>\n        <BarChart width={1200} height={500} data={data}>\n            <XAxis dataKey=\"xName\" stroke=\"#8884d8\" />\n            <YAxis />\n            <Tooltip />\n            <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n            <Bar dataKey={yName} fill=\"#8884d8\" barSize={20} />\n        </BarChart>\n    </div>\n)};\n\nexport default BarChartXY;\n\nBarChartXY.propTypes = {\n    info: PropTypes.arrayOf(PropTypes.shape({\n        xData: PropTypes.string.isRequired,\n        yData: PropTypes.number.isRequired,\n    })),\n    yName: PropTypes.string.isRequired,\n    title: PropTypes.string\n};\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport axios from \"axios\";\nimport PropTypes from 'prop-types';\nimport { setCityForecastData, setCityForecastIsError, setCityForecastIsLoading } from \"../redux/cityForecastReducer\";\nimport { getCityForecastInfo } from '../redux/store';\nimport SearchForm from \"./SearchForm\";\nimport BarChartXY from \"./BarChartXY\";\nimport { API_KEY } from \"../redux/constants\";\n\nconst getTempAndTimeXYData = (list) => {\n    const result = [];\n    list.forEach((item) => {\n        result.push({\n            xData: item.dt_txt.split(' ')[1].slice(0, 5),\n            yData: item.main.temp,\n        })\n    });\n\n    return result;\n};\n\nconst CitiesTemperatureFinder = ({\n    cityForecastInfo,\n    setCityForecastData,\n    setCityForecastIsError,\n    setCityForecastIsLoading\n}) => {\n\n    const getCityForecastInfoFromServer = (value) => {\n        setCityForecastIsError(false);\n        setCityForecastIsLoading(true);\n\n        axios({\n            method: \"get\",\n            url: `https://api.openweathermap.org/data/2.5/forecast?q=${value}&appid=${API_KEY}`,\n        }).then((response) => {\n            setCityForecastData( {...response.data});\n        }).catch(() => {\n            setCityForecastData({});\n            setCityForecastIsError(true);\n        }).finally(() =>{\n            setCityForecastIsLoading(false);\n        })\n    }\n\n    return (\n        <>\n            <SearchForm\n                onSubmit={getCityForecastInfoFromServer}\n                isError={cityForecastInfo.isError}\n                isLoading={cityForecastInfo.isLoading}\n                setIsError={setCityForecastIsError}\n            />\n\n            {Object.keys(cityForecastInfo.data).length > 0 && (\n                <BarChartXY\n                    info={getTempAndTimeXYData([...cityForecastInfo.data.list])}\n                    yName=\"temperature\"\n                    title={`Temperature for ${cityForecastInfo.data.city.name}`}\n                />\n            )}\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    cityForecastInfo: getCityForecastInfo(state)\n});\n\nconst mapDispatchToProps = {\n    setCityForecastData,\n    setCityForecastIsLoading,\n    setCityForecastIsError\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CitiesTemperatureFinder);\n\nCitiesTemperatureFinder.propTypes = {\n    cityForecastInfo: PropTypes.shape({\n        data: PropTypes.shape({\n            list: PropTypes.arrayOf(PropTypes.shape({\n                dt_txt: PropTypes.string,\n                main: PropTypes.arrayOf(PropTypes.shape({\n                    temp: PropTypes.number,\n                })),\n            })),\n            city: PropTypes.shape({\n                name: PropTypes.string,\n            })\n        }),\n        isError: PropTypes.bool.isRequired,\n        isLoading: PropTypes.bool.isRequired\n    }),\n    setCityForecastIsError: PropTypes.func.isRequired,\n    setCityForecastIsLoading: PropTypes.func.isRequired,\n    setCityForecastData: PropTypes.func.isRequired\n};","import React from 'react';\nimport './App.css';\nimport CitiesTemperatureFinder from \"./components/CitiesTemperatureFinder\";\n\nconst App = () =>  (\n      <div className=\"App\">\n          <CitiesTemperatureFinder />\n      </div>\n  );\n\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}